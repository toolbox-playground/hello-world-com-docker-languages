name: Dotnet CD

on:
  push:
    paths-ignore:
      - 'CHANGELOG.md'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:  


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up .NET 8
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Install dependencies
      run: dotnet restore ./dotnet

    - name: Build .NET project
      run: dotnet build --configuration Release ./dotnet

    - name: Publish .NET project
      run: dotnet publish --configuration Release --output ./dotnet/publish ./dotnet
        
    - name: Build Docker image
      run: |
        cd dotnet
        docker build -t gcr.io/toolbox-sandbox-388523/dotnet-ci-cd:1.0.${{ github.run_id }} .

    - name: Installing Google Cloud
      run: |
        apt-get update && apt-get install -y curl python3 python3.8-venv python3-dev python3-pip
        curl https://sdk.cloud.google.com | bash
        PATH=$PATH:/root/google-cloud-sdk/bin

    - name: Configure GCP
      working-directory: dotnet  # Ensure you are in the right directory
      run: |
          echo $GCP_JSON > gcp.json
          export GOOGLE_CREDENTIALS=$(cat gcp.json | jq -c )
          export GOOGLE_APPLICATION_CREDENTIALS=gcp.json
          gcloud auth activate-service-account pipeline-iac@toolbox-sandbox-388523.iam.gserviceaccount.com --key-file=gcp.json
          gcloud config set project toolbox-sandbox-388523
          gcloud auth configure-docker
          docker push gcr.io/toolbox-sandbox-388523/dotnet-ci-cd:1.0.${{ github.run_id }}
          gcloud run deploy dotnet-test --region=us-central1 --port=5000 --image=gcr.io/toolbox-sandbox-388523/dotnet-ci-cd:1.0.${{ github.run_id }} 
          gcloud run services add-iam-policy-binding flask-app --region=us-central1 --platform managed --member="allUsers" --role="roles/run.invoker"
      env:
        GCP_JSON: ${{ secrets.GCP_JSON }}

  gcp:
      name: versioning
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Versioning
          run: |
              text=$(git log -1 --no-merges --pretty=%B)
              echo $text
              if [[ "$PR_TITLE" =~ (fix|patch|feature|feat) ]]; then
                echo "MINOR"
              elif [[ "$PR_TITLE" =~ "BREAKING CHANGE" ]]; then
                echo "MAJOR"
              else
                echo "No version bump needed"
              fi
